# configs/base.yaml

# ====================================================================
# BASE CONFIGURATION
# This file is the master template for all experiments.
# Experimental configs (e.g., in `configs/exp/`) should inherit from
# and override the values defined here.
# ====================================================================

# A list of random seeds to run the experiment on.
# The `run_experiment.py` orchestrator will iterate through this list,
# creating a separate run for each seed.
run_seeds: [42, 11] #[42, 1337, 2023]

# --- DATA CONFIGURATION ---
data:
  # Paths to data directories. These MUST be overridden in experimental configs.
  prepared_data_root: "../prepared_data/placeholder" # Path to the canonical dataset
  interim_data_root: "./interim_data/placeholder"      # Path to store tiles and splits

  # --- SPLIT GENERATION STRATEGY ---
  # This section is the source of truth for how to create train/val/test splits.
  # It is executed by the `generate-splits` script for each seed in `run_seeds`.
  split_generation:
    # `source_splits` defines which folders from `prepared_data_root` to use.
    # The value for each key (`train`, `val`, `test`) can be:
    #   - A list of strings: `["folder1", "folder2"]` -> Use images from these specific folders.
    #   - A float: `0.15` -> Randomly sample this fraction from a source set.
    source_splits:
      # `train`: Required. List of folders for the initial training pool.
      train: ["train"]

      # `val`: Defines the validation set.
      #   - If a list (e.g., `["val"]`), uses a fixed set from that folder.
      #   - If a float (e.g., `0.15`), carves out a random fraction FROM THE `train` SET.
      val: 0.15 

      # `test`: Defines the test set.
      #   - If a list (e.g., `["test"]`), uses a fixed set from that folder.
      #   - If a float (e.g., `0.2`), carves out a random fraction.
      #     THE SOURCE FOR CARVING IS ALWAYS THE VALIDATION SET (`val`).
      #     This ensures the train set is touched as little as possible.
      #     An error will be raised if `val` is not defined when `test` is a float.
      test: ["test"]
  
  # Tiling parameters for `preprocess-tiles` script.
  tiling:
    tile_size: 512
    overlap: 64
  
  # Feature Bank parameters for `preprocess-tiles` script.
  feature_bank:
    use: false
    base_norm: zscore # "zscore" or "none"
    channels:
      - raw
      - clahe
      - scharr
      - laplacian
      - log_sigma1
      - log_sigma2
      - frangi
  
  save_float16: true

# --- MODEL CONFIGURATION ---
model:
  name: "unet"
  encoder: "timm-efficientnet-b3"
  encoder_weights: "imagenet" # `null` for training from scratch
  classes: 1
  
  adapter:
    use: true
    out_channels: 3
    init: "xavier"
    # DEV: Freezing the encoder for a few epochs allows the adapter to learn a
    # reasonable initial projection before the entire network is fine-tuned.
    freeze_encoder_epochs: 1

# --- TRAINING CONFIGURATION ---
train:
  epochs: 3
  batch_size: 8
  num_workers: 2
  amp: true
  
  optimizer:
    name: "adamw"
    lr: 3.0e-4
    weight_decay: 1.0e-4
  
  scheduler:
    name: "cosine"
    params: {}

# --- LOSS FUNCTION CONFIGURATION ---
loss:
  name: "dice_bce"
  params:
    dice_weight: 0.5
    bce_weight: 0.5
    pos_weight: 1.0

# # --- EVALUATION CONFIGURATION ---
# eval:
#   batch_size: 16
#   metrics: ["dice", "iou", "bf1"]
  
#   # --- NEW: ADVANCED VISUALIZATION SECTION ---
#   visualization:
#     enabled: true  # Master switch to enable/disable all visualization generation.
    
#     # --- Selection Strategy ---
#     # Selects which images from the test set to visualize.
#     primary_metric: "dice" # Metric used to sort for 'best' and 'worst'.
#     num_best: 1            # Number of samples with the highest metric score to visualize.
#     num_worst: 1           # Number of samples with the lowest metric score to visualize.
#     num_random: 1          # Number of random samples for an unbiased view.

#     # --- Feature Bank Visualization ---
#     # If true, for each selected image, an additional plot showing all
#     # input filter channels will be generated. This is only active if
#     # the model was trained with `feature_bank.use: true`.
#     visualize_feature_bank: true

#     # --- Styling for Visualization Plots ---
#     style:
#       figsize_per_panel: [6, 6] # (width, height) for each panel in the grid
#       dpi: 150
#       title_fontsize: 12
#       # Colormap for filter visualizations (if visualize_feature_bank is true)
#       colormap: "viridis" 
#       # Overlay settings for the main comparison plot
#       overlay_alpha: 0.4
#       # Colors are in RGB format
#       gt_color_rgb: [0, 255, 0]      # Green for Ground Truth
#       pred_color_rgb: [227, 27, 27] # Red for Prediction

# --- EVALUATION CONFIGURATION ---
eval:
  batch_size: 16
  metrics: ["dice", "iou", "bf1"]
  
  visualization:
    enabled: true
    
    # --- Selection Strategy ---
    primary_metric: "dice"
    num_best: 1
    num_worst: 1
    num_random: 1

    # --- Feature Bank Visualization ---
    visualize_feature_bank: true

    # --- Styling for Visualization Plots ---
    style:
      # General plot settings
      suptitle_fontsize: 16
      title_fontsize: 12
      dpi: 150
      
      # Layout settings
      # For the main comparison plot, we'll use a 2x3 grid.
      comparison_layout_cols: 3
      figsize_per_panel: [6, 6] # (width, height) for each panel in the grid
      
      # Colormap for filter visualizations and heatmaps
      colormap: "viridis"
      
      # Colors are in RGB format [R, G, B]
      # --- Overlay settings ---
      overlay_alpha: 0.4
      gt_overlay_color_rgb: [0, 170, 0]   # Darker Green for Ground Truth
      pred_overlay_color_rgb: [227, 27, 27] # Red for Prediction
      
      # --- Error Map Colors ---
      error_map_tp_color_rgb: [80, 80, 80]     # Gray for True Positive (correctly found)
      error_map_fp_color_rgb: [255, 0, 0]     # Red for False Positive (hallucination)
      error_map_fn_color_rgb: [0, 0, 255]     # Blue for False Negative (missed object)
      
      # --- Info Panel Settings ---
      info_panel_bg_color_rgb: [20, 20, 20] # Dark background
      info_panel_font_color_bgr: [255, 255, 255] # White font (in BGR for OpenCV)
      info_panel_font_scale: 0.8
      info_panel_font_thickness: 1


# --- LOGGING CONFIGURATION ---
logging:
  backend: "mlflow"
  experiment_name: "domain_shift_segmentation"
  artifact_uri: "./mlruns"